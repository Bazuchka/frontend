variables:
  BUILD_VERSION: $CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

stages:
  # - sonar
  - build
  - build_image
  - deploy
  - cleanup
  
# sonarqube-check:
#   stage: sonar
#   image:
#     name: sonarsource/sonar-scanner-cli:5.0
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#     GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - >
#     sonar-scanner
#     -Dsonar.projectKey=Alis_fe
#     -Dsonar.qualitygate.wait=true
#     -Dsonar.exclusions=mobile/ios/**/*,mobile/android/**/*,fullscreen/src/__tests__/**/*
#     -Dsonar.javascript.lcov.reportPaths=fullscreen/coverage/lcov.info

fullscreen-build-npm-frontend:
  stage: build
  image: node:alpine
  script:
    - apk update && apk add git
    - npm install
    - npm run build
  artifacts:
    when: always
    expose_as: 'npm artifact'
    name: 'alis-frontend-build'
    paths:
      - build/
    expire_in: 1 hour
  environment:
    name: development
  when: on_success
  only:
    - master
  tags:
    - dev-runner

fullscreen-create-docker-image:
  stage: build_image
  image: docker:24.0.5
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHORT_SHA}
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
  services:
    - name: docker:24.0.5-dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
      command: ["--insecure-registry", $CI_REGISTRY]
  before_script:
    - echo "${BUILD_VERSION} | ${CI_REGISTRY}"
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER  --password-stdin
  script:
    - docker build --build-arg build_version=${BUILD_VERSION} -t $DOCKER_IMAGE_NAME .
    - docker push "$DOCKER_IMAGE_NAME"
  environment:
    name: development
  when: on_success
  only:
    - master
  tags:
    - dev-runner

deploy-dev:
  stage: deploy
  image: docker:24.0.5
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHORT_SHA}
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
    EXTERNAL_IP_ADDRESS: http://185.149.50.37:55880
    LOCAL_IP_ADDRESS: https://dev-alis-exsim.alabuga.ru
  before_script:
    - echo "${BUILD_VERSION} | ${CI_REGISTRY}"
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER  --password-stdin
  script:
    - docker pull $DOCKER_IMAGE_NAME
    - docker compose -f docker-compose.yml stop
    - docker compose -f docker-compose.yml rm -f
    - docker compose -f docker-compose.yml up -d
  environment:
    name: development
  when: on_success
  only:
    - master
  tags:
    - dev-runner

cleanup-dev:
  stage: cleanup
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
  script:
    - docker image prune --all --force --filter "label=build=frontend"
    - docker system prune --volumes --force
  environment:
    name: testing
  when: on_success
  only:
    - master
  tags:
    - dev-runner

deploy-test:
  stage: deploy
  image: docker:24.0.5
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHORT_SHA}
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
    EXTERNAL_IP_ADDRESS: http://185.149.50.37:55880
    LOCAL_IP_ADDRESS: https://dev-alis-exsim.alabuga.ru
  before_script:
    - echo "${BUILD_VERSION} | ${CI_REGISTRY}"
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER  --password-stdin
  script:
    - docker pull $DOCKER_IMAGE_NAME
    - docker compose -f docker-compose.yml stop
    - docker compose -f docker-compose.yml rm -f
    - docker compose -f docker-compose.yml up -d
  environment:
    name: testing
  when: manual
  only:
    - master
  tags:
    - test-runner

cleanup:
  stage: cleanup
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
  script:
    - docker image prune --all --force --filter "label=build=frontend"
  environment:
    name: testing
  when: on_success
  only:
    - master
  tags:
    - test-runner
