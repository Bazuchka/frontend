variables:
  TEMP_BRANCH_NAME: "temp-${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}"
  BUILD_VERSION:  $CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  PACKAGE_VERSION: "1.0.0-SNAPSHOT"
  REGISTRY_URL: registry-gitlab-devops1c.alabuga.ru/registry/images
  MAIN_BRANCH: main
  REALESE_BRANCH: release

.checkout-before-script:
  before_script:
    - git config --global --add safe.directory /builds/alis/frontend
    - |
      if [[ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]]; then
        echo "This is not a merge request. Skipping the branch creation process.";
      else
        echo "Checking if temporary branch ${TEMP_BRANCH_NAME} exists..."
        git fetch origin
        
        if ! git show-ref --verify --quiet refs/heads/$TEMP_BRANCH_NAME && ! git ls-remote --heads origin $TEMP_BRANCH_NAME | grep -q "$TEMP_BRANCH_NAME"; then
          echo "Branch ${TEMP_BRANCH_NAME} doesn't exist. Creating a new one..." 

          echo "$(git branch)"
          echo "$(git status)"

          git config --global user.email "$CI_REPOSITORY_USERNAME@alabuga.ru"
          git config --global user.name "$CI_REPOSITORY_USERNAME"

          git checkout -b "${TEMP_BRANCH_NAME}"
          git merge origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --no-ff --allow-unrelated-histories -m "Merge ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} into ${TEMP_BRANCH_NAME}"
          git merge origin/${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} --no-ff --allow-unrelated-histories -m "Merge ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} into ${TEMP_BRANCH_NAME}"

          git push https://${CI_REPOSITORY_USERNAME}:${CI_REPOSITORY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git ${TEMP_BRANCH_NAME}
        else
          echo "Pulling temporary branch ${TEMP_BRANCH_NAME}"
          git remote set-url origin https://${CI_REPOSITORY_USERNAME}:${CI_REPOSITORY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
          git checkout ${TEMP_BRANCH_NAME}
        fi
      fi

stages:
  - prepare
  - lint
  - test
  - build
  - setup
  - end-to-end-tests
  - clean-up
  - deploy

.fullscreen-build-npm-frontend:
  image: $REGISTRY_URL/node:23.3.0-alpine-git
  script:
    - echo "BUILD_VERSION=${PACKAGE_VERSION}" >> build.env
    - echo "BUILD_TAG=${BUILD_TAG}" >> build.env
    - npm install
    - npm run build
    - ls -latrh
  after_script:
    - ls -latrh /root/.npm/_logs
  artifacts:
    when: always
    expose_as: 'npm artifact'
    name: 'alis-frontend-build'
    paths:
      - build/
    expire_in: 1 hour
    reports:
      dotenv: build.env

.fullscreen-create-docker-image:
  image: $REGISTRY_URL/docker:24.0.5-git
  variables:
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  script:
    - echo "${BUILD_VERSION} | ${CI_REGISTRY}"
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER  --password-stdin

    - docker build --build-arg build_version=${BUILD_VERSION} -t ${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} .
    - docker tag ${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA} ${DOCKER_IMAGE_NAME}:latest
    - docker push ${DOCKER_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_IMAGE_NAME}:latest

.deploy:
  image: $REGISTRY_URL/docker:24.0.5-git
  variables:
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  script:
    - echo "${BUILD_VERSION} | ${CI_REGISTRY}"
    - docker info
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY_IMAGE -u $CI_REGISTRY_USER  --password-stdin

    - docker pull $DOCKER_IMAGE_NAME:latest
    - docker compose -f docker-compose.yml down
    - docker compose -f docker-compose.yml up -d

create-temp-branch:
  stage: prepare
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
  image: $REGISTRY_URL/bitnami/git:2.47.1
  script:
    - echo "Checking if temporary branch ${TEMP_BRANCH_NAME} exists..."
    - git fetch origin
    - echo "$(git branch)" 
    - echo "$(git status)"
    - git config --global user.email "$CI_REPOSITORY_USERNAME@alabuga.ru"
    - git config --global user.name "$CI_REPOSITORY_USERNAME"
    - |
      if ! git ls-remote --heads origin $TEMP_BRANCH_NAME | grep -q "$TEMP_BRANCH_NAME"; then
        echo "Creating temporary branch ${TEMP_BRANCH_NAME}"
        git checkout -b "${TEMP_BRANCH_NAME}"
        git merge origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --no-ff --allow-unrelated-histories -m "Merge ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} into ${TEMP_BRANCH_NAME}"
        git merge origin/${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} --no-ff --allow-unrelated-histories -m "Merge ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} into ${TEMP_BRANCH_NAME}"
        git push https://${CI_REPOSITORY_USERNAME}:${CI_REPOSITORY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git ${TEMP_BRANCH_NAME}
      else
          echo "Branch ${TEMP_BRANCH_NAME} already exist." 
      fi
  tags:
    - dev-runner
    
run-sonarQube:
  stage: lint
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
      needs: 
        - create-temp-branch
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends: 
    - .checkout-before-script
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  image: 
    name: $REGISTRY_URL/sonarsource/sonar-scanner-cli:11
    entrypoint: [""]
  script:
    - >
      sonar-scanner
      -Dsonar.host.url="${SONAR_HOST_URL}"
      -Dsonar.projectKey=alis_frontend_be19fff9-7cf4-47f1-a513-98a987b566e2
      -Dsonar.qualitygate.wait=true
      -Dsonar.exclusions=mobile/ios/**/*,mobile/android/**/*,fullscreen/src/__tests__/**/*
      -Dsonar.javascript.lcov.reportPaths=fullscreen/coverage/lcov.info  
  tags:
    - dev-runner
  allow_failure: true

run-unitTest:
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
      needs: 
        - create-temp-branch
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends: 
    - .checkout-before-script
  image: $REGISTRY_URL/bitnami/git:2.47.1
  script:
    - echo "Running unit tests on ${TEMP_BRANCH_NAME}"
  tags:
    - dev-runner

run-integrationTest:
  stage: test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
      needs: 
        - create-temp-branch
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends: 
    - .checkout-before-script
  image: $REGISTRY_URL/bitnami/git:2.47.1
  script:
    - echo "Running unit tests on ${TEMP_BRANCH_NAME}"
  tags:
    - dev-runner

fullscreen-build-npm-frontend:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
      needs: 
        - create-temp-branch
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends: 
    - .checkout-before-script
    - .fullscreen-build-npm-frontend
  tags:
    - dev-runner

fullscreen-create-docker-image:
  stage: build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends: 
    - .checkout-before-script
    - .fullscreen-create-docker-image
  needs:
    - fullscreen-build-npm-frontend
  tags:
    - dev-runner

deploy-dev:
  stage: setup
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  needs:
    - fullscreen-create-docker-image
  extends: 
    - .deploy
    - .checkout-before-script
  tags:
    - dev-runner

run-end-to-end-tests:
  stage: end-to-end-tests
  needs:
    - deploy-dev
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends:
    - .checkout-before-script
  image: $REGISTRY_URL/bitnami/git:2.47.1
  script:
    - echo "Running end-to-end-tests on ${TEMP_BRANCH_NAME}"
  tags:
    - dev-runner

stop-containers:
  stage: clean-up
  needs:
    - run-end-to-end-tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_REF_NAME == $MAIN_BRANCH || $CI_COMMIT_REF_NAME == $RELEASE_BRANCH)'
  extends:
    - .checkout-before-script
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  image: $REGISTRY_URL/docker:24.0.5-git
  script:
    - echo "Running clean-up on ${TEMP_BRANCH_NAME}"
    - echo "$BUILD_VERSION | $CI_REGISTRY"
    - echo "DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME"
    - docker info
    - docker compose -f docker-compose.yml down
  when: always
  tags:
    - dev-runner

delete-branch:
  stage: clean-up
  needs:
    - run-sonarQube
    - run-unitTest
    - run-integrationTest
    - fullscreen-build-npm-frontend
    - fullscreen-create-docker-image
    - deploy-dev
    - run-end-to-end-tests
    - stop-containers
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $MAIN_BRANCH || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $RELEASE_BRANCH)'
  extends:
    - .checkout-before-script
  image: $REGISTRY_URL/bitnami/git:2.47.1
  script:
    - |
      if git ls-remote --heads origin $TEMP_BRANCH_NAME | grep -q "$TEMP_BRANCH_NAME"; then
        echo "Deleting branch ${TEMP_BRANCH_NAME}"
        git config --global user.email "$CI_REPOSITORY_USERNAME@alabuga.ru"
        git config --global user.name "$CI_REPOSITORY_USERNAME"
        git remote set-url origin https://${CI_REPOSITORY_USERNAME}:${CI_REPOSITORY_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
        git push origin --delete ${TEMP_BRANCH_NAME}
      else
        echo "Branch ${TEMP_BRANCH_NAME} doesn't exist." 
      fi
  when: always
  tags:
    - dev-runner

deploy-test:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_REF_NAME == $MAIN_BRANCH'
  extends: 
    - .deploy
  variables:
    DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    DOCKER_OPTS: "--insecure-registry=${CI_REGISTRY}"
    BASE_URL: https://test-alis-exsim.alabuga.ru
  after_script:
    - docker restart nginx-proxy
  when: manual
  environment:
    name: testing
    url: https://test-alis-exsim.alabuga.ru/
  tags:
    - test-runner
